import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np

data_list = [
    # likelihood
    np.array([
            [0.8209, 0.7944, 0.6144, 0.1472, 0.5879],
            [0.7873, 0.7816, 0.5764, 0.0605, 0.5499],
            [0.7870, 0.7807, 0.5759, 0.0606, 0.5497],
            [0.5003, 0.4833, 0.2720, 0.0078, 0.2869],
            [0.7702, 0.7632, 0.5479, 0.0457, 0.5331],
        ]),
    # # entropy
    # np.array([
    #         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    #         [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
    #         [0.0160, 0.0158, 0.2601, 0.3518, 0.0642],
    #         [0.1496, 0.1765, 0.4612, 0.6895, 0.3333],
    #         [0.1130, 0.1254, 0.4329, 0.6581, 0.2852],
    #     ]),
    # rank
    np.array([
            [0.7627, 0.7414, 0.5634, 0.0000, 0.4763],
            [0.7388, 0.7286, 0.5324, 0.0000, 0.4587],
            [0.7335, 0.7204, 0.5260, 0.0000, 0.4519],
            [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
            [0.6957, 0.6853, 0.4727, 0.0000, 0.4246],
        ]),
    # logRank
    np.array([
            [0.8145, 0.7863, 0.6066, 0.1469, 0.5849],
            [0.7752, 0.7751, 0.5664, 0.0687, 0.5379],
            [0.7925, 0.7745, 0.5917, 0.0961, 0.5652],
            [0.5018, 0.4644, 0.2737, 0.0078, 0.2657],
            [0.7921, 0.7741, 0.5920, 0.0974, 0.5686],
        ]),
    # LRR
    np.array([
            [0.7740, 0.7423, 0.5835, 0.3069, 0.5642],
            [0.7740, 0.7430, 0.5835, 0.3081, 0.5642],
            [0.7381, 0.7022, 0.5520, 0.2025, 0.5126],
            [0.7654, 0.7181, 0.5822, 0.2927, 0.5519],
            [0.7461, 0.7102, 0.5577, 0.2401, 0.5381],
        ]),
    # NPR
    np.array([
            [0.7161, 0.7127, 0.5220, 0.0000, 0.4450],
            [0.6964, 0.7063, 0.5009, 0.0000, 0.4257],
            [0.6705, 0.6716, 0.4625, 0.0000, 0.3883],
            [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
            [0.6515, 0.6489, 0.4316, 0.0000, 0.3765],
        ]),
    # DetectGPT
    np.array([
            [0.4090, 0.4052, 0.2223, 0.0631, 0.0224],
            [0.3559, 0.3798, 0.1836, 0.0393, 0.0077],
            [0.3231, 0.3507, 0.1689, 0.0240, 0.0058],
            [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
            [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        ]),
    # Fast_DetectGPT
    np.array([
            [0.6879, 0.6401, 0.4045, 0.4102, 0.3181],
            [0.6832, 0.6400, 0.3994, 0.4040, 0.3125],
            [0.6658, 0.6154, 0.3832, 0.3686, 0.2790],
            [0.6879, 0.6401, 0.4045, 0.4114, 0.3193],
            [0.7037, 0.6589, 0.4638, 0.4578, 0.4093],
        ]),
    # DNA-GPT
    np.array([
        [0.8078, 0.7740, 0.6006, 0.1729, 0.5459],
        [0.8053, 0.7747, 0.6001, 0.1716, 0.5463],
        [0.7536, 0.7191, 0.5494, 0.0789, 0.4771],
        [0.3390, 0.2987, 0.1604, 0.0273, 0.1616],
        [0.7801, 0.7415, 0.5636, 0.0974, 0.0974],
    ]),
    # Revise-Detect.
    np.array([
        [0.7961, 0.7734, 0.6438, 0.3032, 0.6405],
        [0.7541, 0.7621, 0.6169, 0.1716, 0.6152],
        [0.7554, 0.7612, 0.6203, 0.1760, 0.6169],
        [0.6006, 0.6018, 0.4665, 0.0674, 0.4658],
        [0.7531, 0.7591, 0.6151, 0.1688, 0.6162],
    ]),
    # Binoculars
    np.array([
        [0.8810, 0.8371, 0.7149, 0.5919, 0.6614],
        [0.8787, 0.8407, 0.7249, 0.6195, 0.6791],
        [0.8848, 0.8392, 0.7471, 0.6856, 0.7235],
        [0.8835, 0.8409, 0.7526, 0.7160, 0.7402],
        [0.8843, 0.8398, 0.7518, 0.7091, 0.7421],
    ]),
# Roberta
    np.array([
            [0.9810, 0.9573, 0.9491, 0.6432, 0.8907],
            [0.9851, 0.9718, 0.9498, 0.8618, 0.9349],
            [0.9687, 0.9366, 0.9826, 0.7881, 0.9200],
            [0.9059, 0.8701, 0.9146, 0.9866, 0.9207],
            [0.9716, 0.9346, 0.9546, 0.9648, 0.9498],
        ]),
    # X-Roberta
    np.array([
            [0.9620, 0.9423, 0.9508, 0.8222, 0.8736],
            [0.9718, 0.9632, 0.9516, 0.8560, 0.9155],
            [0.9525, 0.9222, 0.9625, 0.8826, 0.8928],
            [0.7964, 0.6950, 0.7690, 0.9770, 0.8869],
            [0.9591, 0.9247, 0.9375, 0.9527, 0.9253],
        ]),

    # Roberta Large
    np.array([
            [0.9895, 0.9706, 0.9014, 0.5833, 0.0000],
            [0.9906, 0.9878, 0.8473, 0.4546, 0.0000],
            [0.9795, 0.9461, 0.9896, 0.5102, 0.0000],
            [0.7100, 0.7533, 0.8242, 0.9965, 0.0000],
            [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        ]),

    # X-Roberta Large
    np.array([
            [0.9831, 0.9708, 0.8954, 0.5832, 0.0000],
            [0.9837, 0.9834, 0.9020, 0.6782, 0.0000],
            [0.9580, 0.9361, 0.9698, 0.6528, 0.0000],
            [0.0368, 0.0586, 0.1634, 0.9930, 0.0000],
            [0.0000, 0.0000, 0.0000, 0.0000, 0.0000],
        ]),
]

rows = ['Direct', 'Prompt', 'Paraph.', 'Perturb', 'Mixing']
cols = ['Direct', 'Prompt', 'Paraph.', 'Perturb', 'Mixing']

cmap = plt.get_cmap('RdPu')

titles = ['Likihood', 'Rank', 'LogRank', 'LRR',
          'NPR', 'DetectGPT', 'Fast-DetectGPT', 'DNA-GPT',
          'Revise-Detect.', 'Binoculars', 'Rob-Base', 'X-Rob-Base']

fig, axes = plt.subplots(3, 4, figsize=(18, 12))  # figsize可以根据需要进行调整
fig.tight_layout(pad=2.0)

for i, ax in enumerate(axes.flatten()):
    sns.heatmap(data_list[i], annot=True, linewidths=.5, cmap=cmap,
                xticklabels=cols, yticklabels=rows, ax=ax)

    ax.set_title(titles[i])

plt.savefig('cross_attacks_heatmap.pdf')
plt.show()